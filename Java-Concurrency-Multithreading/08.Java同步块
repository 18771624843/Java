#08.Java同步块

A Java synchronized block marks a method or a block of code as synchronized. Java synchronized blocks can be used to avoid race conditions.

Java synchronized block（Java同步块）用来对方法或代码块进行标记，表明这个方法或代码块是同步的。Java同步块可以避免**竞态条件**。


##synchronized关键字（The Java synchronized Keyword）

Java中的同步块使用关键字**synchronized**进行标记**。同步块在Java中是同步在某个对象上。所有同步在一个对象上的同步块在同一时间只能被一个线程进入并执行里面的代码。**其他所有试图进入该对象同步块的线程将被阻塞，直到执行该同步块中的线程退出。

**synchronized**关键字可以被用于标记以下四种不同类型的块：

- 实例方法（Instance methods）
- 静态方法（Static methods）
- 实例方法中的代码块（Code blocks inside instance methods）
- 静态方法中的代码块（Code blocks inside static methods）

上述同步块都同步在不同对象上。实际需要那种同步块视具体情况而定。

##同步实例方法（Synchronized Instance Methods）

下面是一个同步的实例方法：

```Java
  public synchronized void add(int value){
      this.count += value;
  }
```

使用**synchronized**关键字对方法进行声明，告诉JVM这是一个同步的方法。

Java中的**同步实例方法是基于这个方法所属的实例对象上进行同步的**。因此，每一个同步实例方法都是基于各自的实例对象进行同步的。同一时间，只有一个线程可以访问一个实例对象的同步实例方法。如果有多个实例存在，那么每个线程都可以同时访问各自不同实例对象的同步实例方法，一个实例对象对应一个线程。

##同步静态方法（Synchronized Static Methods）

静态方法的同步与实例方法一致，都是使用**synchronized**在方法放进行声明。

```Java
  public static synchronized void add(int value){
      count += value;
  }
```

同样的，这里的**synchronized**关键字用于告诉JVM这个静态方法是同步的。

**同步静态方法是基于这个静态方法所属的类对象进行同步的**。由于在JVM中，每个类有且只有一个类对象，因此，在同一时间内，只有一个线程能够访问同一个类的同步静态方法。

如果同步静态方法位于不同的类中，那么每个线程都可以访问各自对应的类的同步静态方法，一个线程对应一个类。

##实例方法中的同步块（Synchronized Blocks in Instance Methods）

有些时候，你并不需要同步整一个方法，而只需要同步这个方法下的一小部分代码块。你可以在方法里面使用同步代码块。

下面这个例子就是在非同步方法里面使用了同步代码块：

```Java
  public void add(int value){

    synchronized(this){
       this.count += value;   
    }
  }
```

这个例子里，用了Java的同步代码块来使代码进行同步，让这个方法像同步方法一样执行。

注意在Java的同步代码块里，需要在括号里传递一个对象。这个例子中，这个对象是**this**，this指的是这个实例对象本身。在Java同步代码块括号中的对象称为**监听器对象**。意味着，这个同步块是基于这个监听器对象进行同步的。同步实例方法使用其所在实例对象作为监听器对象。

**同一时间，只有一个线程能够访问基于同一个监听器对象的同步代码。**

下面这个例子，两个同步代码都是基于同一个实例对象进行同步的：

```Java 
  public class MyClass {
  
    public synchronized void log1(String msg1, String msg2){
       log.writeln(msg1);
       log.writeln(msg2);
    }

  
    public void log2(String msg1, String msg2){
       synchronized(this){
          log.writeln(msg1);
          log.writeln(msg2);
       }
    }
  }
```

因此，在这个例子中，每次仅能有一个线程能够访问这两个同步代码的任意一个同步代码。

如果第二个同步块是基于其他监听器对象，例如`synchronized (this.getClass()) {}`，则此时第一个和第二个同步代码的监听器对象分别为：当前实例对象和当前类对象。因此，这两个同步代码可以同时由不同的线程进行访问。

##静态方法中的同步块（Synchronized Blocks in Static Methods）

下面这个例子中，两个同步代码都是基于当前的类对象进行同步的：

```Java
  public class MyClass {

    public static synchronized void log1(String msg1, String msg2){
       log.writeln(msg1);
       log.writeln(msg2);
    }

  
    public static void log2(String msg1, String msg2){
       synchronized(MyClass.class){
          log.writeln(msg1);
          log.writeln(msg2);  
       }
    }
  }
```

同一时间，只有一个线程能够访问这两个同步代码的任意一个同步代码。

如果第二个方法的监听器对象非MyClass.class对象，则两个同步代码可以同时被两个线程访问。


##Java同步示例（Java Synchronized Example）

Here is an example that starts 2 threads and have both of them call the add method on the same instance of Counter. Only one thread at a time will be able to call the add method on the same instance, because the method is synchronized on the instance it belongs to.

```Java
  public class Counter{
     
     long count = 0;
    
     public synchronized void add(long value){
       this.count += value;
     }
  }
  public class CounterThread extends Thread{

     protected Counter counter = null;

     public CounterThread(Counter counter){
        this.counter = counter;
     }

     public void run() {
	for(int i=0; i<10; i++){
           counter.add(i);
        }
     }
  }
  public class Example {

    public static void main(String[] args){
      Counter counter = new Counter();
      Thread  threadA = new CounterThread(counter);
      Thread  threadB = new CounterThread(counter);

      threadA.start();
      threadB.start(); 
    }
  }
```

Two threads are created. The same Counter instance is passed to both of them in their constructor. The Counter.add() method is synchronized on the instance, because the add method is an instance method, and marked as synchronized. Therefore only one of the threads can call the add() method at a time. The other thread will wait until the first thread leaves the add() method, before it can execute the method itself.

If the two threads had referenced two separate Counter instances, there would have been no problems calling the add() methods simultaneously. The calls would have been to different objects, so the methods called would also be synchronized on different objects (the object owning the method). Therefore the calls would not block. Here is how that could look:

```Java
  public class Example {

    public static void main(String[] args){
      Counter counterA = new Counter();
      Counter counterB = new Counter();
      Thread  threadA = new CounterThread(counterA);
      Thread  threadB = new CounterThread(counterB);

      threadA.start();
      threadB.start(); 
    }
  }
```

Notice how the two threads, threadA and threadB, no longer reference the same counter instance. The add method of counterA and counterB are synchronized on their two owning instances. Calling add() on counterA will thus not block a call to add() on counterB.

##Java Concurrency Utilities

The synchronized mechanism was Java's first mechanism for synchronizing access to objects shared by multiple threads. The synchronized mechanism isn't very advanced though. That is why Java 5 got a whole set of concurrency utility classes to help developers implement more fine grained concurrency control than what you get with synchronized.